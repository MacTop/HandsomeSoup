{"name":"Handsomesoup","body":"# HandsomeSoup\r\n\r\nHandsomeSoup is the library I wish I had when I started parsing HTML in Haskell.\r\n\r\nIt is built on top of [HXT](http://www.fh-wedel.de/~si/HXmlToolbox/) and adds a few functions that make is easier to work with HTML.\r\n\r\nMost importantly, it adds CSS selectors to HXT. The goal of HandsomeSoup is to be a complete CSS2 parser for HXT (it is very close to this right now).\r\n\r\n## Install\r\n\r\n    cabal install HandsomeSoup\r\n\r\n## Example\r\n\r\n[Nokogiri](http://nokogiri.org/), the HTML parser for Ruby, has an example showing how to scrape Google search results. This is easy in HandsomeSoup:\r\n\r\n    main = do\r\n        doc <- fromUrl \"http://www.google.com/search?q=egon+schiele\"\r\n        links <- runX $ doc >>> css \"h3.r a\" ! \"href\"\r\n        mapM_ putStrLn links\r\n\r\n## What can HandsomeSoup do for you?\r\n\r\n### Easily parse an online page using `fromUrl`\r\n\r\n    doc <- fromUrl \"http://example.com\"\r\n\r\n### Or a local page using `parseHtml`\r\n\r\n    contents <- readFile [filename]\r\n    doc <- parseHtml contents\r\n\r\n### Easily extract elements using `css`\r\n\r\nHere are some valid selectors:\r\n\r\n    doc <<< css \"a\"\r\n    doc <<< css \"*\"\r\n    doc <<< css \"a#link1\"\r\n    doc <<< css \"a.foo\"\r\n    doc <<< css \"p > a\"\r\n    doc <<< css \"#container h1\"\r\n    doc <<< css \"img[width]\"\r\n    doc <<< css \"img[width=400]\"\r\n    doc <<< css \"a[class~=bar]\"\r\n\r\n### Easily get attributes using `(!)`\r\n\r\n    doc <<< css \"img\" ! \"src\"\r\n    doc <<< css \"a\" ! \"href\"\r\n","tagline":"Work with HTML more easily in HXT","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}